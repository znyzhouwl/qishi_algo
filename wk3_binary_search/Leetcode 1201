class Solution:
    def nthUglyNumber(self, n: int, a: int, b: int, c: int) -> int:
        def lsm(a: int, b: int) -> int:
            v = a * b
            if a > b:
                a, b = b, a
            while b % a != 0:
                a, b = b % a, a
            return v // a
        ab = lsm(a, b)
        ac = lsm(a, c)
        bc = lsm(b, c)
        abc = lsm(ab, ac)
        f = [a, b, c, ab, ac, bc, abc]
        print(f)
        def helper(n: int, f: List) -> int:
            return n // f[0] + n // f[1] + n // f[2] - n // f[3] - n // f[4] - n // f[5] + n // f[6]

        l, r  = 1, 2 * (10 ** 9)
        while l < r:
            mid = (l + r) // 2
            cur = helper(mid, f)
            
            if cur < n:
                l = mid + 1
            elif cur > n:
                r = mid - 1
            else:
                r = mid
                break
        
        return max(r // a * a, r // b * b, r // c * c)
